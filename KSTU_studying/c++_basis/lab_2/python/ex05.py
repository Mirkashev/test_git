arr = [[5, 4, 3, 1],[5, 1, 2, 4],[0, 4, 3, 6],[9, 5, 4, 1]]

a = 4
#заполнение с клавиатуры, раздокументировать при необходимости
# for i in range(a):
#     for k in range(a):
#         arr[i][k] = int(input())


print("\n", "before:", "\n")
print("\n", arr[0], "\n", arr[1], "\n", arr[2], "\n", arr[3])


#сортировка методом пузырька главной диагонали
check = 1
#цикл будет сортировать главную диагональ до тех пор, пока на ней двигаются элементы
while(check != 0):
    check = 0
    for i in range(a - 1):
        for k in range(a - 1):
            #условием для сравнения является равенство индексов главной диагонали
            if i == k:
                if arr[i][k] > arr[i + 1][k + 1]:
                    arr[i][k], arr[i + 1][k + 1] = arr[i + 1][k + 1], arr[i][k]
                    check = 1

#цикл будет сортировать побочную диагональ до тех пор, пока на ней двигаются элементы, только массив сортируется в реверс моде               
check = 1
while(check != 0):
    check = 0
    #от 3 до 1 строки, до 1 из-за того, что нельзя выходить за границы массива. Пример сравнения, элементы в подобном порядке [3][0] & [2][1]; [2][1] & [1][2]; [1][2] & [0][3]; [0][3] - #последний элемент, из-за этого нужно грамотно установить ограничения, чтобы этот элемент не сравнивался с [-1][4], потому что такого нет
    for i in range(a - 1, 0, -1):
        #здесь от 2 до 0, думаю понятно почему, хотя это сделано скорее для симметрии, потому что элемент [0][3] всё равно не возможно получить, потому что i - значение не может быть равно 0
        for k in range(a - 2, -1, -1):
            #главное условие для сравнения - закономерность индексов побочной диагонали, a - количество строк, b - количество столбцов: (a + b) / 2 - 1 = сумме индексов каждого элемента #побочной диагонали(у меня просто стоит a - 1, но смысл не меняется, т.к массив симметричный)
            if i + k == a - 1:
                if arr[i][k] < arr[i - 1][k + 1]:
                    arr[i][k], arr[i - 1][k + 1] = arr[i - 1][k + 1], arr[i][k]
                    check = 1


print("\n", "after:", "\n")
print("\n", arr[0], "\n", arr[1], "\n", arr[2], "\n", arr[3])